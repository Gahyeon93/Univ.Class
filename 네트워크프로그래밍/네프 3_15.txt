circuit과 packet.

	circuit은 고정되어있음. 데이터가 없어도 밴드폭을 잡아먹고 있음. cost가 높다.
	packet은 데이터가 있을 때만 패켓을 만듦. 
	장단점. 인터넷은 당연히 packet이 좋다. 네트웍을 나눠사용할 수 있기 때문. ->그래서 사용량에 따른 요금제가 있었지.

internetworking - 우리가 쓰는 거는 주로 local..

	node는 장치..device를 노드라함.
	network끼리 연결하기도.
	LAN. 하드웨어적인 이더넷방법.
	패킷 등등을 하나의 이더넷 프레임이라고 부름. 쭉쭉 발전해서 4gb까지도.(예전얘기)

addressing 결국 통신하려면 주소가 필요하지(ip가 아니라 physical. mac address말하는거)
	
	mac, physical add~는 유니크함. 각각의 node는 6바이트짜리 주소를 가지고 있음.
	우분투 처럼 버츄얼박스를 만들어서 하면 맥주소를 하나 더 생성함. 그래서 iso 이미지 파일 복사해서 넣었을 때 'move'하는지 'copy'하는지 물어봄. copy라면 새로운 mac주소 생성
	
	주소 확인

gateways
	멀리 있는 다른 네트워크와 연결하기 위해서 필요함.

internet address
	a,b,c,d 클래스..
	공유기에서는 c class private IP를 할당해주지. ~~ 결국 private IP는 hidden IP인거죠.
	
port
	
more /etc/services


vi 편집기
cd works/np
ls
vi end.c
코딩
make end

./end (실행)		->int a=0x12345678, printf:*(char*)&a
아니면 union이용해서 int a, char b 만들어서 사용.

i=0x12345678
0x0랑 (i&0x000000FF)<<24  이걸 or== 으로뒤집을 수 있음. ....오래걸리는데 byte swap을 사용할 수 있음





------------
network의 바이트오더는 거의 big endian을 사용함. 이런 byte order를 잘 맞춰주어야 한다.


~~
~~
~~
UDP. 받던지말던지 상관 X. 그래서 빠름. streaming등에 씀

TCP. 안전하게 보내려면 확인해야함. 저런 format 붙고, 데이터 처리해야하는데 너무 많이 붙어있으니 -> 소켓라이브러리를 사용해서 자기가 알아서 다 해줌.

Client-Server model. 배울거 많음.
----------------
DNS. 